# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
}

type Pricing {
  id: ID!
  name: String
  slug: String
}

input PricingWhereUniqueInput {
  id: ID
}

input PricingWhereInput {
  AND: [PricingWhereInput!]
  OR: [PricingWhereInput!]
  NOT: [PricingWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
}

input PricingOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
}

input PricingUpdateInput {
  name: String
  slug: String
}

input PricingUpdateArgs {
  where: PricingWhereUniqueInput!
  data: PricingUpdateInput!
}

input PricingCreateInput {
  name: String
  slug: String
}

type Template {
  id: ID!
  name: String
  slug: String
  source: String
  url: String
  pricing: Pricing
  images(
    where: TemplateImageWhereInput! = {}
    orderBy: [TemplateImageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [TemplateImage!]
  imagesCount(where: TemplateImageWhereInput! = {}): Int
}

input TemplateWhereUniqueInput {
  id: ID
}

input TemplateWhereInput {
  AND: [TemplateWhereInput!]
  OR: [TemplateWhereInput!]
  NOT: [TemplateWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  source: StringFilter
  url: StringFilter
  pricing: PricingWhereInput
  images: TemplateImageManyRelationFilter
}

input TemplateImageManyRelationFilter {
  every: TemplateImageWhereInput
  some: TemplateImageWhereInput
  none: TemplateImageWhereInput
}

input TemplateOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
  source: OrderDirection
  url: OrderDirection
}

input TemplateUpdateInput {
  name: String
  slug: String
  source: String
  url: String
  pricing: PricingRelateToOneForUpdateInput
  images: TemplateImageRelateToManyForUpdateInput
}

input PricingRelateToOneForUpdateInput {
  create: PricingCreateInput
  connect: PricingWhereUniqueInput
  disconnect: Boolean
}

input TemplateImageRelateToManyForUpdateInput {
  disconnect: [TemplateImageWhereUniqueInput!]
  set: [TemplateImageWhereUniqueInput!]
  create: [TemplateImageCreateInput!]
  connect: [TemplateImageWhereUniqueInput!]
}

input TemplateUpdateArgs {
  where: TemplateWhereUniqueInput!
  data: TemplateUpdateInput!
}

input TemplateCreateInput {
  name: String
  slug: String
  source: String
  url: String
  pricing: PricingRelateToOneForCreateInput
  images: TemplateImageRelateToManyForCreateInput
}

input PricingRelateToOneForCreateInput {
  create: PricingCreateInput
  connect: PricingWhereUniqueInput
}

input TemplateImageRelateToManyForCreateInput {
  create: [TemplateImageCreateInput!]
  connect: [TemplateImageWhereUniqueInput!]
}

type TemplateImage {
  id: ID!
  image: CloudinaryImage_File
  altText: String
  template: Template
}

type CloudinaryImage_File {
  id: ID
  filename: String
  originalFilename: String
  mimetype: String
  encoding: String
  publicUrl: String
  publicUrlTransformed(transformation: CloudinaryImageFormat): String
}

"""
Mirrors the formatting options [Cloudinary provides](https://cloudinary.com/documentation/image_transformation_reference).
All options are strings as they ultimately end up in a URL.
"""
input CloudinaryImageFormat {
  """
   Rewrites the filename to be this pretty string. Do not include `/` or `.`
  """
  prettyName: String
  width: String
  height: String
  crop: String
  aspect_ratio: String
  gravity: String
  zoom: String
  x: String
  y: String
  format: String
  fetch_format: String
  quality: String
  radius: String
  angle: String
  effect: String
  opacity: String
  border: String
  background: String
  overlay: String
  underlay: String
  default_image: String
  delay: String
  color: String
  color_space: String
  dpr: String
  page: String
  density: String
  flags: String
  transformation: String
}

input TemplateImageWhereUniqueInput {
  id: ID
}

input TemplateImageWhereInput {
  AND: [TemplateImageWhereInput!]
  OR: [TemplateImageWhereInput!]
  NOT: [TemplateImageWhereInput!]
  id: IDFilter
  altText: StringFilter
  template: TemplateWhereInput
}

input TemplateImageOrderByInput {
  id: OrderDirection
  altText: OrderDirection
}

input TemplateImageUpdateInput {
  image: Upload
  altText: String
  template: TemplateRelateToOneForUpdateInput
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input TemplateRelateToOneForUpdateInput {
  create: TemplateCreateInput
  connect: TemplateWhereUniqueInput
  disconnect: Boolean
}

input TemplateImageUpdateArgs {
  where: TemplateImageWhereUniqueInput!
  data: TemplateImageUpdateInput!
}

input TemplateImageCreateInput {
  image: Upload
  altText: String
  template: TemplateRelateToOneForCreateInput
}

input TemplateRelateToOneForCreateInput {
  create: TemplateCreateInput
  connect: TemplateWhereUniqueInput
}

type Tool {
  id: ID!
  name: String
  slug: String
  description: String
  url: String
  pricingDetail: String
  pricing: Pricing
  category: ToolCategory
  type: ToolType
  logo: ToolLogo
  images(
    where: ToolImageWhereInput! = {}
    orderBy: [ToolImageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ToolImage!]
  imagesCount(where: ToolImageWhereInput! = {}): Int
}

input ToolWhereUniqueInput {
  id: ID
}

input ToolWhereInput {
  AND: [ToolWhereInput!]
  OR: [ToolWhereInput!]
  NOT: [ToolWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  description: StringFilter
  url: StringFilter
  pricingDetail: StringFilter
  pricing: PricingWhereInput
  category: ToolCategoryWhereInput
  type: ToolTypeWhereInput
  logo: ToolLogoWhereInput
  images: ToolImageManyRelationFilter
}

input ToolImageManyRelationFilter {
  every: ToolImageWhereInput
  some: ToolImageWhereInput
  none: ToolImageWhereInput
}

input ToolOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
  description: OrderDirection
  url: OrderDirection
  pricingDetail: OrderDirection
}

input ToolUpdateInput {
  name: String
  slug: String
  description: String
  url: String
  pricingDetail: String
  pricing: PricingRelateToOneForUpdateInput
  category: ToolCategoryRelateToOneForUpdateInput
  type: ToolTypeRelateToOneForUpdateInput
  logo: ToolLogoRelateToOneForUpdateInput
  images: ToolImageRelateToManyForUpdateInput
}

input ToolCategoryRelateToOneForUpdateInput {
  create: ToolCategoryCreateInput
  connect: ToolCategoryWhereUniqueInput
  disconnect: Boolean
}

input ToolTypeRelateToOneForUpdateInput {
  create: ToolTypeCreateInput
  connect: ToolTypeWhereUniqueInput
  disconnect: Boolean
}

input ToolLogoRelateToOneForUpdateInput {
  create: ToolLogoCreateInput
  connect: ToolLogoWhereUniqueInput
  disconnect: Boolean
}

input ToolImageRelateToManyForUpdateInput {
  disconnect: [ToolImageWhereUniqueInput!]
  set: [ToolImageWhereUniqueInput!]
  create: [ToolImageCreateInput!]
  connect: [ToolImageWhereUniqueInput!]
}

input ToolUpdateArgs {
  where: ToolWhereUniqueInput!
  data: ToolUpdateInput!
}

input ToolCreateInput {
  name: String
  slug: String
  description: String
  url: String
  pricingDetail: String
  pricing: PricingRelateToOneForCreateInput
  category: ToolCategoryRelateToOneForCreateInput
  type: ToolTypeRelateToOneForCreateInput
  logo: ToolLogoRelateToOneForCreateInput
  images: ToolImageRelateToManyForCreateInput
}

input ToolCategoryRelateToOneForCreateInput {
  create: ToolCategoryCreateInput
  connect: ToolCategoryWhereUniqueInput
}

input ToolTypeRelateToOneForCreateInput {
  create: ToolTypeCreateInput
  connect: ToolTypeWhereUniqueInput
}

input ToolLogoRelateToOneForCreateInput {
  create: ToolLogoCreateInput
  connect: ToolLogoWhereUniqueInput
}

input ToolImageRelateToManyForCreateInput {
  create: [ToolImageCreateInput!]
  connect: [ToolImageWhereUniqueInput!]
}

type ToolLogo {
  id: ID!
  image: CloudinaryImage_File
  altText: String
  tools(
    where: ToolWhereInput! = {}
    orderBy: [ToolOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tool!]
  toolsCount(where: ToolWhereInput! = {}): Int
}

input ToolLogoWhereUniqueInput {
  id: ID
}

input ToolLogoWhereInput {
  AND: [ToolLogoWhereInput!]
  OR: [ToolLogoWhereInput!]
  NOT: [ToolLogoWhereInput!]
  id: IDFilter
  altText: StringFilter
  tools: ToolManyRelationFilter
}

input ToolManyRelationFilter {
  every: ToolWhereInput
  some: ToolWhereInput
  none: ToolWhereInput
}

input ToolLogoOrderByInput {
  id: OrderDirection
  altText: OrderDirection
}

input ToolLogoUpdateInput {
  image: Upload
  altText: String
  tools: ToolRelateToManyForUpdateInput
}

input ToolRelateToManyForUpdateInput {
  disconnect: [ToolWhereUniqueInput!]
  set: [ToolWhereUniqueInput!]
  create: [ToolCreateInput!]
  connect: [ToolWhereUniqueInput!]
}

input ToolLogoUpdateArgs {
  where: ToolLogoWhereUniqueInput!
  data: ToolLogoUpdateInput!
}

input ToolLogoCreateInput {
  image: Upload
  altText: String
  tools: ToolRelateToManyForCreateInput
}

input ToolRelateToManyForCreateInput {
  create: [ToolCreateInput!]
  connect: [ToolWhereUniqueInput!]
}

type ToolCategory {
  id: ID!
  name: String
  slug: String
  tools(
    where: ToolWhereInput! = {}
    orderBy: [ToolOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tool!]
  toolsCount(where: ToolWhereInput! = {}): Int
}

input ToolCategoryWhereUniqueInput {
  id: ID
}

input ToolCategoryWhereInput {
  AND: [ToolCategoryWhereInput!]
  OR: [ToolCategoryWhereInput!]
  NOT: [ToolCategoryWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  tools: ToolManyRelationFilter
}

input ToolCategoryOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
}

input ToolCategoryUpdateInput {
  name: String
  slug: String
  tools: ToolRelateToManyForUpdateInput
}

input ToolCategoryUpdateArgs {
  where: ToolCategoryWhereUniqueInput!
  data: ToolCategoryUpdateInput!
}

input ToolCategoryCreateInput {
  name: String
  slug: String
  tools: ToolRelateToManyForCreateInput
}

type ToolType {
  id: ID!
  name: String
  slug: String
  tools(
    where: ToolWhereInput! = {}
    orderBy: [ToolOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tool!]
  toolsCount(where: ToolWhereInput! = {}): Int
}

input ToolTypeWhereUniqueInput {
  id: ID
}

input ToolTypeWhereInput {
  AND: [ToolTypeWhereInput!]
  OR: [ToolTypeWhereInput!]
  NOT: [ToolTypeWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  tools: ToolManyRelationFilter
}

input ToolTypeOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
}

input ToolTypeUpdateInput {
  name: String
  slug: String
  tools: ToolRelateToManyForUpdateInput
}

input ToolTypeUpdateArgs {
  where: ToolTypeWhereUniqueInput!
  data: ToolTypeUpdateInput!
}

input ToolTypeCreateInput {
  name: String
  slug: String
  tools: ToolRelateToManyForCreateInput
}

type Topic {
  id: ID!
  name: String
  slug: String
  tutorials(
    where: TutorialWhereInput! = {}
    orderBy: [TutorialOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tutorial!]
  tutorialsCount(where: TutorialWhereInput! = {}): Int
}

input TopicWhereUniqueInput {
  id: ID
}

input TopicWhereInput {
  AND: [TopicWhereInput!]
  OR: [TopicWhereInput!]
  NOT: [TopicWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  tutorials: TutorialManyRelationFilter
}

input TutorialManyRelationFilter {
  every: TutorialWhereInput
  some: TutorialWhereInput
  none: TutorialWhereInput
}

input TopicOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
}

input TopicUpdateInput {
  name: String
  slug: String
  tutorials: TutorialRelateToManyForUpdateInput
}

input TutorialRelateToManyForUpdateInput {
  disconnect: [TutorialWhereUniqueInput!]
  set: [TutorialWhereUniqueInput!]
  create: [TutorialCreateInput!]
  connect: [TutorialWhereUniqueInput!]
}

input TopicUpdateArgs {
  where: TopicWhereUniqueInput!
  data: TopicUpdateInput!
}

input TopicCreateInput {
  name: String
  slug: String
  tutorials: TutorialRelateToManyForCreateInput
}

input TutorialRelateToManyForCreateInput {
  create: [TutorialCreateInput!]
  connect: [TutorialWhereUniqueInput!]
}

type Tutorial {
  id: ID!
  name: String
  source: String
  slug: String
  description: String
  url: String
  topic: Topic
}

input TutorialWhereUniqueInput {
  id: ID
}

input TutorialWhereInput {
  AND: [TutorialWhereInput!]
  OR: [TutorialWhereInput!]
  NOT: [TutorialWhereInput!]
  id: IDFilter
  name: StringFilter
  source: StringFilter
  slug: StringFilter
  description: StringFilter
  url: StringFilter
  topic: TopicWhereInput
}

input TutorialOrderByInput {
  id: OrderDirection
  name: OrderDirection
  source: OrderDirection
  slug: OrderDirection
  description: OrderDirection
  url: OrderDirection
}

input TutorialUpdateInput {
  name: String
  source: String
  slug: String
  description: String
  url: String
  topic: TopicRelateToOneForUpdateInput
}

input TopicRelateToOneForUpdateInput {
  create: TopicCreateInput
  connect: TopicWhereUniqueInput
  disconnect: Boolean
}

input TutorialUpdateArgs {
  where: TutorialWhereUniqueInput!
  data: TutorialUpdateInput!
}

input TutorialCreateInput {
  name: String
  source: String
  slug: String
  description: String
  url: String
  topic: TopicRelateToOneForCreateInput
}

input TopicRelateToOneForCreateInput {
  create: TopicCreateInput
  connect: TopicWhereUniqueInput
}

type ToolImage {
  id: ID!
  image: CloudinaryImage_File
  altText: String
  tool: Tool
}

input ToolImageWhereUniqueInput {
  id: ID
}

input ToolImageWhereInput {
  AND: [ToolImageWhereInput!]
  OR: [ToolImageWhereInput!]
  NOT: [ToolImageWhereInput!]
  id: IDFilter
  altText: StringFilter
  tool: ToolWhereInput
}

input ToolImageOrderByInput {
  id: OrderDirection
  altText: OrderDirection
}

input ToolImageUpdateInput {
  image: Upload
  altText: String
  tool: ToolRelateToOneForUpdateInput
}

input ToolRelateToOneForUpdateInput {
  create: ToolCreateInput
  connect: ToolWhereUniqueInput
  disconnect: Boolean
}

input ToolImageUpdateArgs {
  where: ToolImageWhereUniqueInput!
  data: ToolImageUpdateInput!
}

input ToolImageCreateInput {
  image: Upload
  altText: String
  tool: ToolRelateToOneForCreateInput
}

input ToolRelateToOneForCreateInput {
  create: ToolCreateInput
  connect: ToolWhereUniqueInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createPricing(data: PricingCreateInput!): Pricing
  createPricings(data: [PricingCreateInput!]!): [Pricing]
  updatePricing(
    where: PricingWhereUniqueInput!
    data: PricingUpdateInput!
  ): Pricing
  updatePricings(data: [PricingUpdateArgs!]!): [Pricing]
  deletePricing(where: PricingWhereUniqueInput!): Pricing
  deletePricings(where: [PricingWhereUniqueInput!]!): [Pricing]
  createTemplate(data: TemplateCreateInput!): Template
  createTemplates(data: [TemplateCreateInput!]!): [Template]
  updateTemplate(
    where: TemplateWhereUniqueInput!
    data: TemplateUpdateInput!
  ): Template
  updateTemplates(data: [TemplateUpdateArgs!]!): [Template]
  deleteTemplate(where: TemplateWhereUniqueInput!): Template
  deleteTemplates(where: [TemplateWhereUniqueInput!]!): [Template]
  createTemplateImage(data: TemplateImageCreateInput!): TemplateImage
  createTemplateImages(data: [TemplateImageCreateInput!]!): [TemplateImage]
  updateTemplateImage(
    where: TemplateImageWhereUniqueInput!
    data: TemplateImageUpdateInput!
  ): TemplateImage
  updateTemplateImages(data: [TemplateImageUpdateArgs!]!): [TemplateImage]
  deleteTemplateImage(where: TemplateImageWhereUniqueInput!): TemplateImage
  deleteTemplateImages(
    where: [TemplateImageWhereUniqueInput!]!
  ): [TemplateImage]
  createTool(data: ToolCreateInput!): Tool
  createTools(data: [ToolCreateInput!]!): [Tool]
  updateTool(where: ToolWhereUniqueInput!, data: ToolUpdateInput!): Tool
  updateTools(data: [ToolUpdateArgs!]!): [Tool]
  deleteTool(where: ToolWhereUniqueInput!): Tool
  deleteTools(where: [ToolWhereUniqueInput!]!): [Tool]
  createToolLogo(data: ToolLogoCreateInput!): ToolLogo
  createToolLogos(data: [ToolLogoCreateInput!]!): [ToolLogo]
  updateToolLogo(
    where: ToolLogoWhereUniqueInput!
    data: ToolLogoUpdateInput!
  ): ToolLogo
  updateToolLogos(data: [ToolLogoUpdateArgs!]!): [ToolLogo]
  deleteToolLogo(where: ToolLogoWhereUniqueInput!): ToolLogo
  deleteToolLogos(where: [ToolLogoWhereUniqueInput!]!): [ToolLogo]
  createToolCategory(data: ToolCategoryCreateInput!): ToolCategory
  createToolCategories(data: [ToolCategoryCreateInput!]!): [ToolCategory]
  updateToolCategory(
    where: ToolCategoryWhereUniqueInput!
    data: ToolCategoryUpdateInput!
  ): ToolCategory
  updateToolCategories(data: [ToolCategoryUpdateArgs!]!): [ToolCategory]
  deleteToolCategory(where: ToolCategoryWhereUniqueInput!): ToolCategory
  deleteToolCategories(where: [ToolCategoryWhereUniqueInput!]!): [ToolCategory]
  createToolType(data: ToolTypeCreateInput!): ToolType
  createToolTypes(data: [ToolTypeCreateInput!]!): [ToolType]
  updateToolType(
    where: ToolTypeWhereUniqueInput!
    data: ToolTypeUpdateInput!
  ): ToolType
  updateToolTypes(data: [ToolTypeUpdateArgs!]!): [ToolType]
  deleteToolType(where: ToolTypeWhereUniqueInput!): ToolType
  deleteToolTypes(where: [ToolTypeWhereUniqueInput!]!): [ToolType]
  createTopic(data: TopicCreateInput!): Topic
  createTopics(data: [TopicCreateInput!]!): [Topic]
  updateTopic(where: TopicWhereUniqueInput!, data: TopicUpdateInput!): Topic
  updateTopics(data: [TopicUpdateArgs!]!): [Topic]
  deleteTopic(where: TopicWhereUniqueInput!): Topic
  deleteTopics(where: [TopicWhereUniqueInput!]!): [Topic]
  createTutorial(data: TutorialCreateInput!): Tutorial
  createTutorials(data: [TutorialCreateInput!]!): [Tutorial]
  updateTutorial(
    where: TutorialWhereUniqueInput!
    data: TutorialUpdateInput!
  ): Tutorial
  updateTutorials(data: [TutorialUpdateArgs!]!): [Tutorial]
  deleteTutorial(where: TutorialWhereUniqueInput!): Tutorial
  deleteTutorials(where: [TutorialWhereUniqueInput!]!): [Tutorial]
  createToolImage(data: ToolImageCreateInput!): ToolImage
  createToolImages(data: [ToolImageCreateInput!]!): [ToolImage]
  updateToolImage(
    where: ToolImageWhereUniqueInput!
    data: ToolImageUpdateInput!
  ): ToolImage
  updateToolImages(data: [ToolImageUpdateArgs!]!): [ToolImage]
  deleteToolImage(where: ToolImageWhereUniqueInput!): ToolImage
  deleteToolImages(where: [ToolImageWhereUniqueInput!]!): [ToolImage]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  pricings(
    where: PricingWhereInput! = {}
    orderBy: [PricingOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Pricing!]
  pricing(where: PricingWhereUniqueInput!): Pricing
  pricingsCount(where: PricingWhereInput! = {}): Int
  templates(
    where: TemplateWhereInput! = {}
    orderBy: [TemplateOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Template!]
  template(where: TemplateWhereUniqueInput!): Template
  templatesCount(where: TemplateWhereInput! = {}): Int
  templateImages(
    where: TemplateImageWhereInput! = {}
    orderBy: [TemplateImageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [TemplateImage!]
  templateImage(where: TemplateImageWhereUniqueInput!): TemplateImage
  templateImagesCount(where: TemplateImageWhereInput! = {}): Int
  tools(
    where: ToolWhereInput! = {}
    orderBy: [ToolOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tool!]
  tool(where: ToolWhereUniqueInput!): Tool
  toolsCount(where: ToolWhereInput! = {}): Int
  toolLogos(
    where: ToolLogoWhereInput! = {}
    orderBy: [ToolLogoOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ToolLogo!]
  toolLogo(where: ToolLogoWhereUniqueInput!): ToolLogo
  toolLogosCount(where: ToolLogoWhereInput! = {}): Int
  toolCategories(
    where: ToolCategoryWhereInput! = {}
    orderBy: [ToolCategoryOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ToolCategory!]
  toolCategory(where: ToolCategoryWhereUniqueInput!): ToolCategory
  toolCategoriesCount(where: ToolCategoryWhereInput! = {}): Int
  toolTypes(
    where: ToolTypeWhereInput! = {}
    orderBy: [ToolTypeOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ToolType!]
  toolType(where: ToolTypeWhereUniqueInput!): ToolType
  toolTypesCount(where: ToolTypeWhereInput! = {}): Int
  topics(
    where: TopicWhereInput! = {}
    orderBy: [TopicOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Topic!]
  topic(where: TopicWhereUniqueInput!): Topic
  topicsCount(where: TopicWhereInput! = {}): Int
  tutorials(
    where: TutorialWhereInput! = {}
    orderBy: [TutorialOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tutorial!]
  tutorial(where: TutorialWhereUniqueInput!): Tutorial
  tutorialsCount(where: TutorialWhereInput! = {}): Int
  toolImages(
    where: ToolImageWhereInput! = {}
    orderBy: [ToolImageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ToolImage!]
  toolImage(where: ToolImageWhereUniqueInput!): ToolImage
  toolImagesCount(where: ToolImageWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
